/**
 *  Chapman Fibaro RGBW Virtual Switch
 *
 *  Copyright 2016 chapmanportal
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Fibaro RGBW Color Virtual Routine Switch",
    namespace: "chapmanportal/smartthings-alexa",
    author: "chapmanportal",
    description: "Virtual Switch to set light colour when triggered by routine execution",
    category: "Convenience",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    oauth: true)


preferences {

page(name: "pageOne", title: "Configure your Lighting", nextPage: "selectActions", uninstall: true) {

	section("Configure your Colour Switch:") {		
        input "ledlight","device.fibaroRGBWController",title: "Choose your RGBW Light",required: true,multiple: true;
        
        input "onOff","enum",title: "Turn On or Off?", options: ["On","Off"],required: false,multiple: false;

        input "pattern1", "enum", title: "Pick a Color / Pattern", description: "Select the pattern to use", options: ["daylight","red","green","blue","cyan","magenta","orange","purple","yellow","white","fireplace","storm","deepfade","litefade","police"], multiple: false, required: true;
        
        input "level", "enum", title: "Set Dimmer Level", options: [[10:"10%"],[20:"20%"],[30:"30%"],[40:"40%"],[50:"50%"],[60:"60%"],[70:"70%"],[80:"80%"],[90:"90%"],[100:"100%"]], defaultValue: "100"
        
        label title: "Assign a name", required: false
        
	}
    
}
    
    page(name: "selectActions")
}
    
def selectActions() {
    dynamicPage(name: "selectActions", title: "Select Routine Action to Execute", install: true, uninstall: true) {

        // get the available actions
        def actions = location.helloHome?.getPhrases()*.label
        if (actions) {
            // sort them alphabetically
            actions.sort()
            section("Select a Routine") {
                log.trace actions
                // use the actions as the options for an enum input
                input "action", "enum", title: "Select a routine to trigger lighting", options: actions
            }
        }
    }
}
   


def installed() {
	log.debug "Installed with settings: ${settings}"
	initialize()
}

def updated() {
	log.debug "Updated with settings: ${settings}"
	unsubscribe()
	initialize()
}

def initialize() {
	// TODO: subscribe to attributes, devices, locations, etc.
    subscribe(location, "routineExecuted", routineChanged)    
}

def routineChanged(evt) {
    log.debug "rountineChanged, triggerRoutine = $action, location.routineExecuted = $evt.displayName, pattern = $pattern1, onOff = $onOff"
	
    if (action == evt.displayName) {
    	if (onOff == "On") {
        	log.debug"Setting Colour to $pattern1"
        	ledlight."$pattern1"()
            if (pattern != "police") {
            	log.debug"Setting Level to $level"
            	ledlight.setLevel(level as Integer)
            }
        } else {
        	log.debug"Setting Colour to $pattern1 and turning Off"
        	ledlight."$pattern1"()
            ledlight.setWhiteLevel(0)
        	log.debug"Turn Off"
        	ledlight.off()
        }
    }
}
