/**
 *  Chapman Fibaro RGBW Virtual Switch
 *
 *  Copyright 2016 chapmanportal
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Fibaro RGBW Color Virtual Switch",
    namespace: "chapmanportal/smartthings-alexa",
    author: "chapmanportal",
    description: "Virtual Switch to set light colour when triggered by change in mode when a routine if fired.  Designed to work for the Fibaro RGBW Controller",
    category: "Convenience",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    oauth: true)


preferences {
	section("Configure your Colour Switch:") {		
        input "ledlight","device.fibaroRGBWController",title: "Choose your RGBW Light",required: true,multiple: true;
        
        input "onOff","enum",title: "Turn On or Off?", options: ["On","Off"],required: false,multiple: false;

        input "pattern1", "enum", title: "Pick a Color / Pattern", description: "Select the pattern to use", options: ["daylight","red","green","blue","cyan","magenta","orange","purple","yellow","white","fireplace","storm","deepfade","litefade","police"], multiple: false, required: true;
        
        input "triggerMode", "mode", title: "select a mode to trigger", multiple: false, required: true;
	}
   
}

def installed() {
	log.debug "Installed with settings: ${settings}"
	initialize()
}

def updated() {
	log.debug "Updated with settings: ${settings}"
	unsubscribe()
	initialize()
}

def initialize() {
	// TODO: subscribe to attributes, devices, locations, etc.
    subscribe(location, "mode", modeChangeHandler)    
}

def modeChangeHandler(evt) {
    log.debug "changeModeHandler, location.mode = $location.mode, newMode = $triggerMode, location.modes = $location.modes, pattern = $pattern1, level = $dimLevel, onOff = $onOff"
	
    log.debug "changeModeHandler, evt.value = $evt.value"
    if (location.modes?.find{it.name == triggerMode}) {
    	if (onOff == "On") {
        	log.debug"Setting Colour to $pattern1 & Dimmer Level to $dimLevel.value"
        	ledlight."$pattern1"()
        } else {
        	log.debug"Setting Colour to $pattern1 & Dimmer Level to $dimLevel and turning Off"
        	ledlight."$pattern1"()
        	log.debug"Turn Off"
        	ledlight.off()
        }
    }
}

// TODO: implement event handlers
